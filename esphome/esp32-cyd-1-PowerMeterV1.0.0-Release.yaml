# ========================================================================================
#           Advanced configuration for the ESP32-2432S028R display on ESPHome
#                     Version 1.0.0 - Developed by Simone7121
# ========================================================================================
#     This YAML file is designed to integrate the ESP32 with a TFT display 
#     and Home Assistant, displaying real-time data from a solar inverter. 
#     The configuration includes backlight control, RGB LEDs, energy production 
#     and consumption sensors, and interactive graphs.
#
#       - Created to offer an intuitive and highly customizable solution
#       - Optimized for solar energy monitoring
#       - Compatible with touch devices and LVGL graphic displays
#
#                                   (*)
#
#                   Developed with passion by Simone7121
#       For more information or support, contact me at www.simonedanna.it !
# ========================================================================================


# ============================================================ 
#                 Standard ESPHome setup
# ============================()==============================

# Substitutions: simplify configuration with reusable variables
substitutions:
  device_name: yellowtft1  # Device name, used in Home Assistant references
  friendly_name: Yellow TFT 1  # Friendly name shown in Home Assistant

# ESPHome naming
esphome:
  name: $device_name
  friendly_name: $friendly_name
  on_boot:
  - delay: 5s
#  - lvgl.widget.hide: boot_screen

# Images to use for icons and the screen
image:
  - file: https://esphome.io/_static/favicon-512x512.png
    id: boot_logo             # Initial logo
    resize: 200x200
    type: RGB565
    use_transparency: true    # Use transparency for light background

  - file: mdi:transmission-tower-export
    id: prelievo_icon         # Icon for grid export
    resize: 30x30

  - file: mdi:transmission-tower-import
    id: immissione_icon       # Icon for grid import
    resize: 30x30

  - file: mdi:home-lightning-bolt-outline
    id: home_pow_icon         # Icon for home consumption
    resize: 30x30

  - file: mdi:solar-panel
    id: produzione_icon       # Icon for solar production
    resize: 30x30

  - file: mdi:battery
    id: accumulo_icon         # Icon for battery
    resize: 30x30

# Hardware configuration for the ESP32 microcontroller
esp32:
  board: esp32dev             # Board used
  framework:
    type: arduino             # Type of framework for programming

# Enable logging for debugging
logger:

# API Configuration to communicate with Home Assistant
api:
  encryption:
    key: !secret homeassistant_key # HOMEASSISTANT ENCRYPTION KEY
  on_client_connected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - lvgl.widget.show: lbl_hastatus            # Show connected client status
  on_client_disconnected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - lvgl.widget.hide: lbl_hastatus            # Hide client status

# OTA (Over-The-Air) configuration for software updates
ota:
  platform: esphome
  password: !secret ota_password    # OTA Upgrade Password

# Wi-Fi Configuration
wifi:
  ssid: !secret wifi_ssid           # Wi-Fi SSID (Secret)
  password: !secret wifi_password   # Wi-Fi Password (Secret)
  ap:
    ssid: $device_name WiFi         # Hotspot SSID (Fallback)
    password: "1234567890"          # Hotspot Password (Fallback)

# CAPTIVE PORTAL for managing fallback connection
captive_portal:
# ============================()=============================== 

# ============================================================ 
#               Home Assistant related setup
# ============================()===============================

# Set the light entities to expose in the HA integration
light:
  - platform: monochromatic   # Monochromatic
    output: backlight_pwm
    name: Display Backlight   # Controls the backlight
    id: backlight
    restore_mode: ALWAYS_ON   # Always On
  
  - platform: rgb             # Set up the LED on the back 
    name: LED
    id: led
    red: output_red
    green: output_green
    blue: output_blue
    restore_mode: ALWAYS_OFF  # Always Off
# ============================()=============================== 

# ============================================================ 
#                  Hardware related setup                     
# ============================()============================== 

# Configuration of the SPI bus for the display and touchscreen
# (The ESP32-2432S028R uses separate SPI buses for display and touch)
spi:
  - id: tft                 # SPI for the TFT Screen
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12

  - id: touch               # SPI for the Touch Controller
    clk_pin: GPIO25
    mosi_pin: GPIO32
    miso_pin: GPIO39


# Configuration of outputs for backlight and LEDs
output:
  - platform: ledc
    pin: GPIO21             # Pin for LCD Backlight
    id: backlight_pwm

  - platform: ledc
    id: output_red
    pin: GPIO4              # Pin for Red
    inverted: true

  - platform: ledc
    id: output_green
    pin: GPIO16             # Pin for Green
    inverted: true

  - platform: ledc
    id: output_blue
    pin: GPIO17             # Pin for Blue
    inverted: true

# Setup the ili9xxx platform
# Display is used as 240x320 by default so we rotate it to 0Â°
display:
  - platform: ili9xxx
    model: ILI9341
    id: yellow_screen
    spi_id: tft
    cs_pin: GPIO15
    dc_pin: GPIO2
    rotation: 0             # Display Rotation
    dimensions:             # Display Dimensions
      height: 240
      width: 320
    invert_colors: false
    auto_clear_enabled: false
    update_interval: never
    color_order: rgb        # ATTENTION: Only if you see shifted colors, change from bgr to rgb


# Configuration of the touchscreen
touchscreen:
  - platform: xpt2046
    id: yellow_touchscreen
    spi_id: touch
    cs_pin: GPIO33
    interrupt_pin: GPIO36
    update_interval: 50ms
    threshold: 400
    calibration:
      x_min: 300
      x_max: 3900
      y_min: 200
      y_max: 3700
    transform:
      swap_xy: true
      mirror_x: true
      mirror_y: true
# ============================()=============================== 

# ============================================================ 
#               LGVL Display related setup
# ============================()=============================== 

# Custom font for battery icons (Material Design Icons)
font:
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: battery_icons_30
    size: 30                # Font size in points
    bpp: 4                  # Bits per pixel for higher quality
    glyphs: [               # Battery icons used
      "\U000F007A",     # mdi-battery-10
      "\U000F007B",     # mdi-battery-20
      "\U000F007C",     # mdi-battery-30
      "\U000F007D",     # mdi-battery-40
      "\U000F007E",     # mdi-battery-50
      "\U000F007F",     # mdi-battery-60
      "\U000F0080",     # mdi-battery-70
      "\U000F0081",     # mdi-battery-80
      "\U000F0082",     # mdi-battery-90
      "\U000F0079",     # mdi-battery (full)
      "\U000F008E",     # mdi-battery-outline
      "\U000F0091",     # mdi-battery-unknown
    ]

# LVGL Configuration for custom themes and styles
lvgl:
  theme:
    label:
      text_font: montserrat_16  # Custom font for all labels
    button:
      bg_color: 0x2F8CD8        # Background color of the button
      bg_grad_color: 0x005782   # Background gradient color
      bg_grad_dir: VER          # Vertical gradient direction
      bg_opa: COVER             # Background opacity 100%
      border_color: 0x0077b3    # Border color
      border_width: 1           # Border width
      text_color: 0xFFFFFF      # Text color
      pressed:                  # Style for pressed button
        bg_color: 0x006699
        bg_grad_color: 0x00334d
      checked:                  # Style for checked button
        bg_color: 0x1d5f96
        bg_grad_color: 0x03324A
        text_color: 0xfff300
    buttonmatrix:
      bg_opa: TRANSP            # Transparent background
      border_color: 0x0077b3
      border_width: 0
      text_color: 0xFFFFFF
      pad_all: 0                # No padding
      items:                    # Style for button matrix items
        bg_color: 0x2F8CD8
        bg_grad_color: 0x005782
        bg_grad_dir: VER
        bg_opa: COVER
        border_color: 0x0077b3
        border_width: 1
        text_color: 0xFFFFFF
        text_font: montserrat_16  # Font for buttons
        pressed:
          bg_color: 0x006699
          bg_grad_color: 0x00334d
        checked:
          bg_color: 0x1d5f96
          bg_grad_color: 0x03324A
          text_color: 0x005580
    switch:
      bg_color: 0xC0C0C0        # Base color of the switch
      bg_grad_color: 0xb0b0b0   # Background gradient color
      bg_grad_dir: VER
      bg_opa: COVER
      checked:                  # Style for active switch
        bg_color: 0x1d5f96
        bg_grad_color: 0x03324A
      knob:                     # Style of the knob
        bg_color: 0xFFFFFF
        bg_grad_color: 0xC0C0C0
        bg_grad_dir: VER
        bg_opa: COVER
    slider:
      border_width: 1
      border_opa: 15%           # Border opacity
      bg_color: 0xcccaca        # Base color of the slider
      bg_opa: 15%
      indicator:                # Indicator value of the slider
        bg_color: 0x1d5f96
        bg_grad_color: 0x03324A
        bg_grad_dir: VER
        bg_opa: COVER
      knob:                     # Knob of the slider
        bg_color: 0x2F8CD8
        bg_grad_color: 0x005782
        bg_grad_dir: VER
        bg_opa: COVER
        border_color: 0x0077b3
        border_width: 1
        text_color: 0xFFFFFF

  style_definitions:
    - id: header_footer
      bg_color: 0x2F8CD8                               # Background color of header/footer
      bg_grad_color: 0x005782
      bg_grad_dir: VER
      bg_opa: COVER
      border_opa: TRANSP
      radius: 0                                        # Square corners
      pad_all: 0
      pad_row: 0
      pad_column: 0
      border_color: 0x0077b3                           # Border color
      text_color: 0xFFFFFF                             # Text color
      width: 100%                                      # Full width
      height: 30                                       # Fixed height

  top_layer:
    widgets:
      - buttonmatrix:                                  # Navigation menu at the bottom of the screen
          align: bottom_mid                            # Positioned at the bottom center
          styles: header_footer                        # Style defined for the header/footer
          pad_all: 0                                   # No padding
          outline_width: 0                             # Outline width
          id: top_layer
          items:                                       # Menu items
            styles: header_footer
          rows:                                        # Buttons configuration
            - buttons:
              - id: page_prev                          # Previous page button
                text: "\uF053"                         # Icon for previous page
                on_press:
                  then:
                    lvgl.page.previous:                # Action to show the previous page
              - id: page_home                          # Home page button
                text: "\uF015"                         # Icon for home
                on_press:
                  then:
                    lvgl.page.show: main_page          # Action to show the main page
              - id: page_next                          # Next page button
                text: "\uF054"                         # Icon for next page
                on_press:
                  then:
                    lvgl.page.next:                    # Action to show the next page
      - label:                                         # Label for client status
          text: "\uF1EB"                               # Icon for status
          id: lbl_hastatus
          hidden: true                                 # Initially hidden
          align: bottom_mid                            # Align bottom center
          x: -30                                       # Horizontal offset
          y: -8                                        # Vertical offset
          text_align: center                           # Center text
          text_color: 0xFFFFFF                         # White color

  pages:
  - id: main_page                                    # Main page
    widgets:

      # Solar Production (Top Left)
      - label:                                       # Label for Solar Production
          text: "Solar"
          x: 10                                      # Horizontal position
          y: 10                                      # Vertical position
          text_color: orange                         # Orange color
          text_font: montserrat_20                   # Font size 20
      - label:                                       # Solar production value
          id: produzione_value
          text: ".... W"
          x: 10
          y: 40
          text_font: montserrat_16                   # Font size 16
      - image:                                       # Icon for solar production
          id: produzione_image
          src: produzione_icon
          x: 120
          y: 10
      - bar:                                         # Solar production graph
          id: produzione_bar
          x: 10
          y: 70
          width: 140                                 # Bar width
          height: 20                                 # Bar height
          min_value: 0                               # Minimum value
          max_value: 5000                            # Maximum value
          bg_color: orange                           # Orange background color

      # ENEL Network Consumption (Top Right)
      - label:                                       # Label for Network
          text: "Network"
          x: 170
          y: 10
          text_color: blue                           # Blue color
          text_font: montserrat_20
      - label:                                       # Network value
          id: grid_value
          text: ".... W"
          x: 170
          y: 40
          text_font: montserrat_16
      - image:                                       # Icon for network import/export
          id: grid_image
          src: immissione_icon
          x: 280
          y: 10
      - bar:                                         # Network graph
          id: grid_bar
          x: 170
          y: 70
          width: 140
          height: 20
          min_value: -5000                           # Minimum value (negative for import)
          max_value: 5000                            # Maximum value (positive for export)
          bg_color: blue                             # Blue color

      # Home Consumption (Bottom Left)
      - label:                                       # Label for Home Consumption
          text: "Home"
          x: 10
          y: 110
          text_color: red                            # Red color
          text_font: montserrat_20
      - label:                                       # Home consumption value
          id: user_value
          text: ".... W"
          x: 10
          y: 140
          text_font: montserrat_16
      - image:                                       # Icon for home consumption
          id: user_image
          src: home_pow_icon
          x: 120
          y: 110
      - bar:                                         # Home consumption graph
          id: user_bar
          x: 10
          y: 170
          width: 140
          height: 20
          min_value: 0                               # Minimum value
          max_value: 5000                            # Maximum value
          bg_color: red                              # Red color

      # Battery (Bottom Right)
      - label:                                      # Label for Battery
          text: "Battery"
          x: 170
          y: 110
          text_color: green
          text_font: montserrat_20                   # Font size 20
      - label:                                       # Battery value
          id: accumulo_value
          text: ".... W"
          x: 170
          y: 140
          text_font: montserrat_16                   # Font size 16
      - label:                                       # Dynamic battery icon
          id: accumulo_image
          text_font: battery_icons_30                # Font for battery icons
          text_color: orange                         # Orange icon color
          text: "\U000F0091"                         # Initial icon (mdi-battery-unknown)
          x: 280
          y: 110
      - bar:                                         # Battery status graph
          id: accumulo_bar
          x: 170
          y: 170
          width: 140                                 # Bar width
          height: 20                                 # Bar height
          min_value: -5000                           # Minimum value (discharge)
          max_value: 5000                            # Maximum value (charge)
          bg_color: green                            # Green color

  - id: sub1_page                                    # Second page
    widgets:
      - label:                                       # Test message on the second page
          text: "HELLO"
          x: 10
          y: 10
          text_color: orange                         # Orange color
          text_font: montserrat_20                   # Font size 20

  buffer_size: 0.6                                     # Buffer size for rendering (DO NOT CHANGE OTHERWISE IT CRASHES DUE TO PSRAM SHORTAGE)

# ============================()=============================== 


# ============================================================ 
#               Home Assistant Sensor Probing
# ============================()===============================

# Sensors configured via Home Assistant
sensor:

  - platform: homeassistant                             # Solar production sensor
    id: sensor_produzione
    entity_id: sensor.inverter_fotovoltaico_instant_solar_power
    on_value:
      - lvgl.label.update:                              # Update Solar Production label
          id: produzione_value
          text: !lambda 'return ("+" + String((int)id(sensor_produzione).state) + " W").c_str();'
      - lvgl.bar.update:                                # Update Solar Production bar
          id: produzione_bar
          value: !lambda 'return (int)id(sensor_produzione).state;'

  - platform: homeassistant                             # Grid import/export sensor
    id: sensor_grid
    entity_id: sensor.inverter_fotovoltaico_instant_grid_power
    on_value:
      - lvgl.label.update:                              # Update Grid label
          id: grid_value
          text: !lambda |-
            auto gr_value = id(sensor_grid).state;
            if (gr_value > 0) {
              return ("+" + String((int)gr_value) + " W (Income $)").c_str();
            } else if (gr_value == 0){
              return ("~" + String("0 W (Stand-By)")).c_str();
            } else {
              return (String((int)gr_value) + " W ($ Cost)").c_str();
            }
      - lvgl.bar.update:                                # Update Grid bar
          id: grid_bar
          value: !lambda 'return (int)id(sensor_grid).state;'

  - platform: homeassistant                             # Home consumption sensor
    id: sensor_user
    entity_id: sensor.inverter_fotovoltaico_instant_user_power
    on_value:
      - lvgl.label.update:                              # Update Home Consumption label
          id: user_value
          text: !lambda 'return ("-" + String((int)id(sensor_user).state) + " W").c_str();'
      - lvgl.bar.update:                                # Update Home Consumption bar
          id: user_bar
          value: !lambda 'return (int)id(sensor_user).state;'

  - platform: homeassistant                             # Battery storage sensor
    id: sensor_accumulo
    entity_id: sensor.inverter_fotovoltaico_instant_battery_power
    on_value:
      - lvgl.label.update:                              # Update Battery label
          id: accumulo_value
          text: !lambda |-
            auto acc_value = id(sensor_accumulo).state;
            if (acc_value > 0) {
              return ("+" + String((int)acc_value) + " W (Charging)").c_str();
            } else if (acc_value == 0){
              return ("~" + String("0 W (Stand-By)")).c_str();
            } else {
              return (String((int)acc_value) + " W (Discharging)").c_str();
            }
      - lvgl.bar.update:                                # Update Battery bar
          id: accumulo_bar
          value: !lambda 'return (int)id(sensor_accumulo).state;'

  - platform: homeassistant                             # Battery charge percentage
    id: solare_battery_percentage
    entity_id: sensor.inverter_fotovoltaico_battery_level
    on_value:
      - lvgl.label.update:                              # Update battery icon
          id: accumulo_image
          text: !lambda |-
            static char buf[10];
            std::string icon;
            int x = (int)id(solare_battery_percentage).state;
            if (x == 100) {
              icon = "\U000F0079";                      // mdi-battery (full)
            } else if (x > 90) {
              icon = "\U000F0082";                      // mdi-battery-90
            } else if (x > 80) {
              icon = "\U000F0081";                      // mdi-battery-80
            } else if (x > 70) {
              icon = "\U000F0080";                      // mdi-battery-70
            } else if (x > 60) {
              icon = "\U000F007F";                      // mdi-battery-60
            } else if (x > 50) {
              icon = "\U000F007E";                      // mdi-battery-50
            } else if (x > 40) {
              icon = "\U000F007D";                      // mdi-battery-40
            } else if (x > 30) {
              icon = "\U000F007C";                      // mdi-battery-30
            } else if (x > 20) {
              icon = "\U000F007B";                      // mdi-battery-20
            } else if (x > 10) {
              icon = "\U000F007A";                      // mdi-battery-10
            } else if (x > 0) {
              icon = "\U000F008E";                      // mdi-battery-outline
            } else {
              icon = "\U000F0091";                      // mdi-battery-unknown
            }
            snprintf(buf, sizeof(buf), "%s", icon.c_str());
            return buf;

      - lvgl.label.update:                              # Update icon color based on charge
          id: accumulo_image
          text_color: !lambda |-
            int r = 0, g = 0, b = 0;
            int x = (int)id(solare_battery_percentage).state;
            if (x < 50) {
              r = 255;                                  // Red increases below 50%
              g = (int)(5.1 * x);                       // Green proportional to charge
            } else {
              g = 255;                                  // Max green above 50%
              r = (int)(510 - 5.1 * x);                 // Red decreases above 50%
            }
            lv_color_t color = lv_color_make(r, g, b);  // Converts to LVGL color
            return color;

# ============================()===============================


